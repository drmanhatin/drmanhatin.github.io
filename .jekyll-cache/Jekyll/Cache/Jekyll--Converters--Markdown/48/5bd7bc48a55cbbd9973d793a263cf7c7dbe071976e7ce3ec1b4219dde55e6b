I"ë<h1 id="azure-customvision-realtime-recognition-demo">Azure CustomVision Realtime Recognition demo</h1>

<p>For a customer I was tasked to demonstrate the capabilities of <a href="https://customvision.ai">Azure‚Äôs CustomVision platform</a>. To help truly envision what the CustomVision platform can do, I proposed we should try to make the demonstration happen in ‚Äòreal time‚Äô. Real time in this case means drawing the labels over the recognized objects within the timespan of seconds. In this blog post, I will demonstrate how simple it is to teach a CustomVision model to recognize different chess pieces.</p>

<h3 id="this-is-the-end-result">This is the end result</h3>
<div style="max-width: 100%">
<iframe width="560" height="560" style="max-width: 100%" src="https://www.youtube.com/embed/t0P6LBDkSlc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>

<p>As you can see in the video above, which I took using my phone, the CustomVision model can recognize most chess pieces easily. It does have some trouble with recognizing the differences between a pawn and a rook, which is understandable. These pieces are pretty similar, and I‚Äôve only fed the model about 100 photo‚Äôs yet.</p>

<p>On a technical level, what happens in this video is this:</p>

<ol>
  <li>The phone takes a picture, using my <a href="https://github.com/drmanhatin/CustomVisionRealTime">CustomVision RealTime toolkit</a>. This toolkit is run in the browser, <strong>so no app required!</strong></li>
  <li>The picture is compressed, to save bandwidth, speed up the upload, and to ensure that the video does not exceed 4MB (max size for labeling in CustomVision)</li>
  <li>The picture is sent to the CustomVision API</li>
  <li>CustomVision returns the labels and the coordinates of where it has detected these labels</li>
  <li>The labels are drawn over the camera screen in the browser</li>
</ol>

<p>This process typically takes between 1 to 2 seconds per picture, depending on the network speed, device speed and the size of the picture.</p>

<h3 id="how-to-teach-customvision-to-recognize-different-chess-pieces">How to teach CustomVision to recognize different chess pieces</h3>

<p>This is actually VERY simple and doesn‚Äôt require ANY knowledge of programming or machine learning. First, create an account on Azure CustomVision if you don‚Äôt have one yet. Then, create a project. Select ‚ÄúObject Detection‚Äù and ‚ÄúGeneral‚Äù domain.</p>

<p>Take pictures of your chess pieces. In order to be as efficient as possible, take pictures keeping the following things in mind:</p>

<ul>
  <li>Take photos from many different angles</li>
  <li>Take photos in consistent lighting (e.g. if you try to predict chess pieces in daytime light, train your model in daytime light)</li>
  <li>Label photos accurately, draw the bounding boxes as close to the pieces as possible</li>
</ul>

<p>then you can label multiple chess pieces at the same time and at different angles. As such:
<img src="/assets/images/chess-1.png" alt="image tooltip here" /></p>

<p>A minimum of 15 images per ‚Äútag‚Äù (type of object, in this case a rook, bishop, pawn, queen, king or knight) is required. Once you have labeled 15, click ‚Äútrain‚Äù in the top right corner of the CustomVision portal and select ‚ÄúQuick Training‚Äù. After a few minutes, the training will finish. In the ‚ÄúPerformance‚Äù tab of the portal, you can see how the model has performed. If you want to test the model ‚Äúin realtime‚Äù, click ‚ÄúPublish‚Äù. Then, click on the ‚ÄúPrediction URL‚Äù button. Here you can find the URL + key, which you will require in the next step.</p>

<p>Go to the <a href="https://customvision.victorsanner.nl">CustomVision Toolbox</a> on your phone. Enter the URL + Key. Now point your phone at a few chess pieces and see how your model performs!</p>

<h3 id="how-the-important-parts-of-the-code-look-like">How the important parts of the code look like</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
     
<span class="k">if</span><span class="p">(</span><span class="nx">reqsSincePause</span> <span class="o">&gt;</span> <span class="mi">250</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">frozen</span> <span class="o">&amp;&amp;</span> <span class="nx">pauseAutomatically</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">pausebutton</span><span class="dl">"</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">try</span> <span class="p">{</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">totalReqs</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">loop</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">111</span><span class="p">)</span>
<span class="k">return</span>
<span class="p">}</span>
  
<span class="k">if</span> <span class="p">(</span><span class="nx">frozen</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">loop</span><span class="p">();</span>
 <span class="p">},</span> <span class="mi">1111</span><span class="p">)</span>
 <span class="k">return</span>
<span class="p">}</span>
       
<span class="k">await</span> <span class="nx">processOnAzure</span><span class="p">();</span>

<span class="p">}</span>

<span class="k">catch</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">loop</span><span class="p">();</span>
  <span class="p">},</span> <span class="mi">111</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

:ET